# Exact solution - GBM Model
from pandas_datareader import data as pdr
import pandas as pd
import numpy as np
import datetime
import yfinance as yf
import matplotlib.pyplot as plt
import seaborn as sns
import scipy as sc
from scipy.stats import norm

def Brownian(seed, N):
    
    np.random.seed(seed)                         
    dt = 1/N  
    print("dt") 
    print(dt)                                 # time step
    b = np.random.normal(0., 1., int(N))*np.sqrt(dt)  # brownian increments
    print(b)
    W = np.cumsum(b)  
    print("w")
    print(W)                           # brownian path
    return W, b

def GBM(So, mean, sd, W, T, N):    
    t = np.linspace(0.,1.,N+1)
    print(t)
    S = []
    date2=[]
    S.append(So)
    print(date2)
    date2.append(data.index)
    print(date2)
    for i in range(1,int(N+1)):
      drift = (mean - 0.5 * sd**2.0) * t[i]
      diffusion = sd * W[i-1]
      S_temp = So*np.exp(drift + diffusion)
      S.append(S_temp)
      print("w1")
      print(i)
      print(W[i-1])
    return S, t


plt.style.use('seaborn-whitegrid')
print ("hello")
yf.pdr_override()
start_date=datetime.datetime.strptime('18/09/28','%y/%m/%d')
end_date=datetime.datetime.strptime('19/09/26', '%y/%m/%d')
data = pdr.get_data_yahoo('ACA.PA', start=start_date, end=end_date)

data['Return']= (data['Open']-data['Open'].shift(+1))/data                  ['Open']
print((data.head()))
#sns.set_style('darkgrid')
#sns.distplot(data['Return'])
sd=data['Return'].std()*np.sqrt(252.0) # diffusion cofficient
mean =data['Return'].mean()*252.0 ## drift cofficient
print(sd)
print(mean)

T = 1
N = 2**6

seed = 5
So = data['Open'][0]            # Initial APPL stock price (01/01/2016)
W = Brownian(seed, N)[0]


soln = GBM(So, mean, sd, W, T, N)[0]    # Exact solution
t = GBM(So, mean, sd, W, T, N)[1]       # time increments for  plotting
plt.plot(t, soln, label ='GBM')


# EM( Euler Maruyama Approximation) This is for numerical approximations
def EM(So, mu, sigma, b, T, N, M):
    dt = M * (1/N)  # EM step size
    L = N / M
    wi = [So]
    for i in range(0,int(L)):
        Winc = np.sum(b[(M*(i-1)+M):(M*i + M)])
        w_i_new = wi[i]+mu*wi[i]*dt+sigma*wi[i]*Winc
        wi.append(w_i_new)
    return wi, dt


# Changing the time step sizes
#
# dt = 0.03125
b = Brownian(5, N)[1]    # Brownian increments 
M = 1                    
L = int(N/M)
EM_approx_1 = EM(So, mean, sd, b, T, N, M)[0]
time_EM_1 = np.linspace(0,1,L+1)

# dt = 0.0625
b = Brownian(5, N)[1]    # Brownian increments 
M = 4                    
L = int(N/M)
EM_approx_2 = EM(So, mean, sd, b, T, N, M)[0]
time_EM_2 = np.linspace(0,1,L+1)


plt.plot(time_EM_1, EM_approx_1, label = 'dt = 0.03125', ls ='--')
plt.plot(time_EM_2, EM_approx_2, label = 'dt = 0.0625', ls ='--')


plt.ylabel('APPL Stock Price, $')
plt.title('Geometric Brownian Motion - APPL')

plt.legend(loc = 'upper left')
plt.show()
